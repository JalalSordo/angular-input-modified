!function(window,angular){"use strict";function ModifiableBehaviorDirective($animate,inputModifiedConfig){var config=inputModifiedConfig;return{restrict:"A",require:["?ngModel","?^form","?^bsModifiable"],link:function($scope,$element,attrs,controllers){function onInputValueChanged(){initializeMasterValue();var e=!compare(ngModel.$modelValue,ngModel.masterValue);ngModel.modified!==e&&(ngModel.modified=e,updateFormModifiedStateByModel(ngForm,ngModel),updateCssClasses())}function initializeMasterValue(){masterValueIsSet||(ngModel.masterValue=ngModel.$modelValue,updateCssClasses(),masterValueIsSet=!0)}function updateCssClasses(){$animate.addClass($element,ngModel.modified?config.modifiedClassName:config.notModifiedClassName),$animate.removeClass($element,ngModel.modified?config.notModifiedClassName:config.modifiedClassName)}function setPristine(){originalSetPristine.apply(this,arguments),setMasterValue(ngModel.$modelValue)}function setMasterValue(e){ngModel.masterValue=e,ngModel.modified=!1,updateFormModifiedStateByModel(ngForm,ngModel),updateCssClasses()}function reset(){try{eval("$scope."+modelPath+" = ngModel.masterValue;")}catch(exception){}}var modelPath=attrs.ngModel,ngModel=controllers[0],ngForm=controllers[1],bsModifiable=controllers[2];if(ngModel&&(config.enabledGlobally||bsModifiable)){ngForm&&!isFormControllerInitialized(ngForm)&&initializeForm(ngForm);var masterValueIsSet=!1,originalSetPristine=ngModel.$setPristine;ngModel.$setPristine=setPristine,ngModel.modified=!1,ngModel.masterValue=void 0,ngModel.reset=reset,$scope.$watch(modelPath,onInputValueChanged)}}}}function ModifiableDirective(){return{restrict:"A",controller:function(){}}}function ConfigProvider(){var e={enabledGlobally:!0,modifiedClassName:"ng-modified",notModifiedClassName:"ng-not-modified"};return{enableGlobally:function(){return e.enabledGlobally=!0,this},disableGlobally:function(){return e.enabledGlobally=!1,this},setModifiedClassName:function(i){return e.modifiedClassName=String(i),this},setNotModifiedClassName:function(i){return e.notModifiedClassName=String(i),this},$get:function(){return e}}}function updateFormModifiedStateByModel(e,i){if(e){var o=e.modifiedModels.indexOf(i),n=-1!==o;i.modified&&!n?(e.modifiedModels.push(i),e.modifiedCount++):!i.modified&&n&&(e.modifiedModels.splice(o,1),e.modifiedCount--),e.modified=e.modifiedCount>0}}function isModelController(e){return"object"==typeof e&&"$modelValue"in e}function isFormController(e){return"object"==typeof e&&"$submitted"in e}function isFormControllerInitialized(e){return"undefined"!=typeof e.modified}function isModelControllerInitialized(e){return"modified"in e}function iterateFormElements(e,i){angular.forEach(e,function(e){isModelController(e)&&i(e)})}function iterateFormParents(e,i){var o;do e=e.$$parentForm,o=isFormController(e),o&&i(e);while(o)}function initializeForm(e){e.modified=!1,e.modifiedCount=0,e.modifiedModels=[],e.modifiedChildFormsCount=0,e.modifiedChildForms=[],e.reset=resetForm}function resetForm(e){e=e||this,iterateFormElements(e,function(e){isModelControllerInitialized(e)&&e.reset()})}function compare(e,i){return e=normalizeValue(e),i=normalizeValue(i),"object"==typeof e&&"object"==typeof i?e instanceof Date&&i instanceof Date?e.getTime()===i.getTime():angular.equals(e,i):e==i}function normalizeValue(e){return void 0===e||""===e?null:e}angular.module("ngInputModified",[]).directive("bsModifiable",ModifiableDirective).directive("ngModel",ModifiableBehaviorDirective).provider("inputModifiedConfig",ConfigProvider),ModifiableBehaviorDirective.$inject=["$animate","inputModifiedConfig"]}(window,angular);